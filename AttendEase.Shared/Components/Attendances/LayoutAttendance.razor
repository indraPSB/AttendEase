@using AttendEase.DB.Models
@using AttendEase.Shared.Components.Attendances
@using AttendEase.Shared.Models
@using Microsoft.EntityFrameworkCore

<Tabs EnableFadeEffect="true">
    <Tab Title="Overview">
        <Content>
            <div class="d-grid gap-2 d-md-flex justify-content-md-center my-2">
                @if (isAdmin)
                {
                    <Button Class="me-1 my-1" Color="ButtonColor.Primary" @onclick="OnEditAttendance" Disabled="isEditDisabled">
                        Edit Attendance
                        <Badge Color="@(isEditDisabled ? BadgeColor.Danger : BadgeColor.Success)">@selectedAttendancesCount</Badge>
                    </Button>
                    <Button Class="me-1 my-1" Color="ButtonColor.Primary" @onclick="OnDeleteAttendances" Disabled="isDeleteDisabled">
                        Delete Attendance
                        <Badge Color="@(isDeleteDisabled ? BadgeColor.Danger : BadgeColor.Success)">@selectedAttendancesCount</Badge>
                    </Button>
                }

                @if (FormFactor.GetFormFactor() == "Web")
                {
                    <Button Class="me-0 my-1" Color="ButtonColor.Primary" @onclick="DownloadFile">Generate Report</Button>
                }
            </div>

            <ListAttendance @ref="listAttendances" Attendances="attendances" SelectedAttendancesChanged="OnSelectedItemsChanged" />
        </Content>
    </Tab>
    <Tab Title="Trends">
        <Content>
            @if (attendances is null)
            {
                <em>Fetching attendances...</em>
            }
            else
            {
                <Tabs EnableFadeEffect="true">
                    @foreach (var attendancesForSchedule in attendances.Where(a => a.Timestamp > DateTimeOffset.Now.AddDays(-29).Date && a.Timestamp < DateTimeOffset.Now.AddDays(1).Date).GroupBy(a => a.Schedule!.Id))
                    {
                        string scheduleName = attendancesForSchedule.First().Schedule!.Name;
                        List<Attendance> attendancesList = attendancesForSchedule.ToList();

                        <Tab Title="@scheduleName" Name="@attendancesForSchedule.Key.ToString()">
                            <Content>
                                <div class="row">
                                    <div class="col-12 col-lg-4">
                                        <PieAttendance Attendances="@attendancesList" />
                                    </div>
                                    <div class="col-12 col-lg-8">
                                        <BarAttendance Attendances="@attendancesList" />
                                    </div>
                                </div>
                            </Content>
                        </Tab>
                    }
                </Tabs>
            }
        </Content>
    </Tab>
</Tabs>

<Modal @ref="editAttendanceModal" title="Edit Attendance" IsScrollable="true" CloseOnEscape="true" OnHiding="OnHiding">
    <BodyTemplate>
        <EditAttendance />
    </BodyTemplate>
</Modal>

<Modal @ref="deleteAttendancesModal" title="Delete Attendances" IsScrollable="true" CloseOnEscape="true" OnHiding="OnHiding">
    <BodyTemplate>
        <DeleteAttendances />
    </BodyTemplate>
</Modal>

@code {
    [Inject] ToastService ToastService { get; set; } = default!;
    [Inject] IFormFactor FormFactor { get; set; } = default!;
    [Inject] IAuthService AuthService { get; set; } = default!;
    [Inject] IAttendanceService AttendanceService { get; set; } = default!;

    private User? currentUser = default!;
    private IEnumerable<Attendance> attendances = default!;
    private HashSet<Attendance> selectedAttendances = new();
    private ListAttendance listAttendances = default!;
    private Modal editAttendanceModal = default!;
    private Modal deleteAttendancesModal = default!;
    private bool isEditDisabled = true;
    private bool isDeleteDisabled = true;
    private int selectedAttendancesCount = 0;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetUser();
        isAdmin = currentUser?.Role == UserRole.Admin;

        if (attendances is null && currentUser is not null)
        {
            if (isAdmin)
            {
                attendances = await AttendanceService.GetAttendances() ?? Enumerable.Empty<Attendance>();
            }
            else
            {
                attendances = await AttendanceService.GetAttendances(currentUser.Id) ?? Enumerable.Empty<Attendance>();
            }
        }
    }

    private void OnSelectedItemsChanged(HashSet<Attendance> selectedAttendances)
    {
        if (isAdmin)
        {
            this.selectedAttendances = selectedAttendances;
            isEditDisabled = selectedAttendances.Count != 1;
            isDeleteDisabled = selectedAttendances.Count < 1;
            selectedAttendancesCount = selectedAttendances.Count;
        }
    }

    private async Task OnEditAttendance()
    {
        if (isAdmin)
        {
            if (selectedAttendances.Count == 1)
            {
                Attendance attendance = selectedAttendances.First();
                Dictionary<string, object>? parameters = new()
                {
                    { "Attendance", attendance },
                    { "EditedAttendance", EventCallback.Factory.Create<EditAttendance.EditAttendanceModel>(this, OnEditedAttendance) }
                };

                await editAttendanceModal.ShowAsync<EditAttendance>($"Edit Attendance for '{attendance.Schedule!.Name}'", parameters: parameters);
            }
            else
            {
                ToastMessage message = new()
                {
                    Type = ToastType.Warning,
                    Title = "No Attendance Selected",
                    HelpText = $"{DateTimeOffset.Now:G}",
                    AutoHide = true,
                    Message = "Please select one attendance to edit."
                };
            }
        }
    }

    private async Task OnEditedAttendance(EditAttendance.EditAttendanceModel attendance)
    {
        if (isAdmin)
        {
            ToastMessage message = new()
            {
                Type = ToastType.Success,
                Title = "Attendance Edited",
                HelpText = $"{DateTimeOffset.Now:G}",
                AutoHide = true,
                Message = "The attendance has been edited."
            };
            ToastService.Notify(message);

            await editAttendanceModal.HideAsync();
        }
    }

    private async Task OnDeleteAttendances()
    {
        if (isAdmin)
        {
            if (selectedAttendances.Count > 0)
            {
                Dictionary<string, object>? parameters = new()
                {
                    { "Attendances", selectedAttendances },
                    { "DeletedAttendances", EventCallback.Factory.Create<DeleteAttendances.DeleteAttendancesModel>(this, OnDeletedAttendances) }
                };

                await deleteAttendancesModal.ShowAsync<DeleteAttendances>("Delete Attendances", parameters: parameters);
            }
            else
            {
                ToastMessage message = new()
                {
                    Type = ToastType.Warning,
                    Title = "No Attendances Selected",
                    HelpText = $"{DateTimeOffset.Now:G}",
                    AutoHide = true,
                    Message = "Please select one or more attendances to delete."
                };
            }
        }
    }

    private async Task OnDeletedAttendances(DeleteAttendances.DeleteAttendancesModel model)
    {
        if (isAdmin)
        {
            int count = model.Attendances.Count();

            ToastMessage message = new()
            {
                Type = ToastType.Success,
                Title = count == 1 ? "Attendance Deleted" : "Attendances Deleted",
                HelpText = $"{DateTimeOffset.Now:G}",
                AutoHide = true,
                Message = count == 1 ? "The attendance has been deleted." : $"'{count}' attendances have been deleted."
            };
            ToastService.Notify(message);

            await deleteAttendancesModal.HideAsync();
        }
    }

    private async Task OnHiding()
    {
        await listAttendances.RefreshAttendances();
    }

    private async Task DownloadFile()
    {
        await listAttendances.DownloadReport();
    }
}
