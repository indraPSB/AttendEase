@using AttendEase.DB.Models

<BarChart @ref="barChart" />

@code {
    [Parameter] public IEnumerable<Attendance> Attendances { get; set; } = default!;

    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;
    private bool isFirstRender = false;
    private bool isParamSet = false;
    private bool isInitialized = false;

    private Task InitializeBar()
    {
        const int ColorPunctual = 0;
        const int ColorPresent = 1;
        const int ColorAbsent = 2;
        const int ColorTrend = 3;

        isInitialized = true;

        List<string> colors = ["#20c997", "#198754", "#dc3545", "#ffc107"]; // Bootstrap colors for teal, success, danger and warning
        List<string> labels = new();
        List<IChartDataset> datasets = new();
        List<double?> punctual = new();
        List<double?> present = new();
        List<double?> absent = new();
        Dictionary<DateOnly, (double Punctual, double Present, double Absent)> data = new();

        // Prepare data and labels for chart
        foreach (Attendance attendance in Attendances)
        {
            DateOnly key = DateOnly.FromDateTime(attendance.Timestamp.DateTime);
            bool isPunctual = TimeOnly.FromDateTime(attendance.Timestamp.DateTime) <= attendance.Schedule!.StartTime;
            bool isPresent = attendance.Attended && !isPunctual;
            bool isAbsent = !attendance.Attended;

            if (data.TryGetValue(key, out var value))
            {
                data[key] = (value.Punctual + (isPunctual ? 1 : 0), value.Present + (isPresent ? 1 : 0), value.Absent + (isAbsent ? 1 : 0));
            }
            else
            {
                data[key] = (isPunctual ? 1 : 0, isPresent ? 1 : 0, isAbsent ? 1 : 0);
            }
        }

        foreach ((DateOnly key, var value) in data.OrderBy(d => d.Key))
        {
            labels.Add(key.ToString("MMM d"));
            punctual.Add(value.Punctual);
            present.Add(value.Present);
            absent.Add(value.Absent);
        }

        // Calculate moving averages
        List<double?> trend = Enumerable.Range(0, punctual.Count).Select(_ => (double?)null).ToList();
        int window = 3;
        if (punctual.Count >= window)
        {
            DateOnly maxDate = data.Keys.Max();

            for (int i = 0; i < window; i++)
            {
                double total = (punctual.TakeLast(window - i).Sum() ?? 0D) + (present.TakeLast(window).Sum() ?? 0D) + (trend.Where(t => t.HasValue).Sum() ?? 0D);
                double average = total / window;

                trend.Add(average);

                labels.Add(maxDate.AddDays(i + 1).ToString("MMM d"));
            }
        }

        // Prepare datasets and options for chart
        BarChartDataset datasetPunctual = new()
        {
            Label = "Punctual",
            Data = punctual,
            BackgroundColor = new List<string> { colors[ColorPunctual] },
            BorderColor = new List<string> { colors[ColorPunctual] },
            BorderWidth = new List<double> { 0 },
        };
        datasets.Add(datasetPunctual);

        BarChartDataset datasetPresent = new()
        {
            Label = "Present",
            Data = present,
            BackgroundColor = new List<string> { colors[ColorPresent] },
            BorderColor = new List<string> { colors[ColorPresent] },
            BorderWidth = new List<double> { 0 },
        };
        datasets.Add(datasetPresent);

        BarChartDataset datasetAbsent = new()
        {
            Label = "Absent",
            Data = absent,
            BackgroundColor = new List<string> { colors[ColorAbsent] },
            BorderColor = new List<string> { colors[ColorPresent] },
            BorderWidth = new List<double> { 0 },
        };
        datasets.Add(datasetAbsent);

        BarChartDataset datasetTrend = new()
        {
            Label = "Trend",
            Data = trend,
            BackgroundColor = new List<string> { colors[ColorTrend] },
            BorderColor = new List<string> { colors[ColorTrend] },
            BorderWidth = new List<double> { 0 },
        };
        datasets.Add(datasetTrend);

        chartData = new ChartData { Labels = labels, Datasets = datasets };

        barChartOptions = new();
        barChartOptions.Responsive = true;
        barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Nearest };
        barChartOptions.IndexAxis = "x";

        barChartOptions.Scales.X!.Title = new ChartAxesTitle { Display = true, Color = "Grey", Text = "Dates", };
        barChartOptions.Scales.Y!.Title = new ChartAxesTitle { Display = true, Color = "Grey", Text = "Total", };

        barChartOptions.Scales.X.Stacked = true;
        barChartOptions.Scales.Y.Stacked = true;

        barChartOptions.Plugins.Title!.Display = true;
        barChartOptions.Plugins.Title.Color = "Grey";
        barChartOptions.Plugins.Title.Text = $"Attendance between {Attendances.Min(a => a.Timestamp):d} and {Attendances.Max(a => a.Timestamp):d}";

        return barChart.InitializeAsync(chartData, barChartOptions);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isFirstRender = true;

            if (isFirstRender && isParamSet && !isInitialized)
            {
                await InitializeBar();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Attendances is not null)
        {
            isParamSet = true;

            if (isParamSet && isFirstRender && !isInitialized)
            {
                await InitializeBar();
            }
        }
    }
}
