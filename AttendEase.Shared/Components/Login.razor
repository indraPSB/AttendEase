@using AttendEase.DB.Models
@using AttendEase.Shared.Providers
@using AttendEase.Shared.Services
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-floating mb-3">
        <InputText id="login-email" type="email" class="form-control" placeholder="E-Mail" @bind-Value="@login.Email" />
        <label for="login-email">E-Mail</label>
    </div>

    <div class="form-floating @(string.IsNullOrEmpty(message) ? "" : "mb-3")">
        <InputText id="login-password" type="password" class="form-control" placeholder="Password" @bind-Value="@login.Password" />
        <label for="login-password">Password</label>
    </div>

    <ValidationMessage For="@(() => login.Email)" class="validation-message mt-3" />
    <ValidationMessage For="@(() => login.Password)" />
    @((MarkupString)message)

    <div class="d-grid gap-2 d-md-flex justify-content-md-center">
        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="mt-3">Login</Button>
    </div>
</EditForm>

@code {
    private LoginModel login = new();
    private EditContext? editContext;
    private string message = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        editContext = new EditContext(login);
    }

    public async Task HandleOnValidSubmit()
    {
        if (editContext?.Validate() ?? false)
        {
            bool success = await AuthService.Login(new LoginRequest { Email = login.Email, Password = login.Password });

            if (success && AuthenticationStateProvider is AttendEaseAuthenticationStateProvider attendEaseAuthenticationStateProvider)
            {
                attendEaseAuthenticationStateProvider.NotifyAuthenticationStateChanged();
            }
            else
            {
                message = "<div class='validation-message'>Unable to login. Please check that the email or password is entered correctly and try again later.</div>";
            }
        }
        else
        {
            message = "<div class='validation-message'>Unable to validate form.</div>";
        }

        StateHasChanged();
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "'Email' is required.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "'Password' is required.")]
        public string? Password { get; set; }
    }
}
