@using AttendEase.DB.Models
@using Microsoft.Extensions.Logging

<Grid TItem="User"
      Class="table table-hover table-bordered table-striped"
      DataProvider="UsersDataProvider"
      AllowFiltering="true"
      AllowPaging="true"
      PageSize="@pageSize"
      AllowSorting="true"
      AllowSelection="true"
      SelectionMode="GridSelectionMode.Multiple"
      SelectedItemsChanged="OnSelectedItemsChanged"
      Responsive="true">

    <GridColumns>
        <GridColumn TItem="User" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id">
            @context.Id
        </GridColumn>
        <GridColumn TItem="User" HeaderText="Name" PropertyName="Name" SortKeySelector="item => item.Name">
            @context.Name
        </GridColumn>
        <GridColumn TItem="User" HeaderText="E-Mail" PropertyName="Email" SortKeySelector="item => item.Email">
            @context.Email
        </GridColumn>
        <GridColumn TItem="User" HeaderText="Role" PropertyName="Role" SortKeySelector="item => item.Role">
            @context.Role
        </GridColumn>
    </GridColumns>
</Grid>

<div class="form-floating mb-3" style="width: 9rem;">
    <select class="form-select" id="list-users-page-size" @bind=@pageSize>
        <option value="10" selected>10</option>
        <option value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
    </select>
    <label for="list-users-page-size">Users Per Page</label>
</div>

@code {
    [Inject] public IUserService UserService { get; set; } = default!;

    [Parameter] public EventCallback<HashSet<User>> SelectedUsersChanged { get; set; }

    private IEnumerable<User> users = default!;
    private HashSet<User> selectedUsers = new();
    private int pageSize = 10;

    private async Task<GridDataProviderResult<User>> UsersDataProvider(GridDataProviderRequest<User> request)
    {
        if (users is null)
        {
            users = await UserService.GetUsers() ?? Enumerable.Empty<User>();
        }

        return await Task.FromResult(request.ApplyTo(users));
    }

    private async Task OnSelectedItemsChanged(HashSet<User> users)
    {
        selectedUsers = users is not null && users.Any() ? users : new();

        await SelectedUsersChanged.InvokeAsync(selectedUsers);
    }
}
