@using AttendEase.DB.Models
@using AttendEase.Shared.Models
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService

@if (User is null)
{
    <Alert Color="AlertColor.Warning">
        No user was found
    </Alert>
}
else
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-floating mb-3">
            <InputText id="edit-user-name" type="text" class="form-control" placeholder="Name" @bind-Value="@editUserModel.Name" />
            <label for="edit-user-name">Name</label>
        </div>

        <div class="form-floating mb-3">
            <InputText id="edit-user-password" type="password" class="form-control" placeholder="Password" @bind-Value="@editUserModel.Password" />
            <label for="edit-user-password">Password</label>
        </div>

        <div class="form-floating mb-3">
            <InputText id="edit-user-email" type="email" class="form-control" placeholder="E-Mail" @bind-Value="@editUserModel.Email" />
            <label for="edit-user-email">E-Mail</label>
        </div>

        <div class="form-floating mb-3">
            <InputSelect class="form-select" id="edit-user-role" @bind-Value="@editUserModel.Role">
                <option value="@UserRole.Admin">Admin</option>
                <option value="@UserRole.Business">Business</option>
                <option value="@UserRole.Standard">Standard</option>
            </InputSelect>
            <label for="list-users-page-size">Role</label>
        </div>

        <ValidationMessage For="@(() => editUserModel.Name)" class="validation-message mt-3" />
        <ValidationMessage For="@(() => editUserModel.Email)" />
        <ValidationMessage For="@(() => editUserModel.Role)" />
        @((MarkupString)message)

        <div class="d-grid gap-2 d-md-flex justify-content-md-center">
            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="mt-3">Edit</Button>
            <Button Type="ButtonType.Reset" Color="ButtonColor.Secondary" Class="mt-3" @onclick="Reset">Reset</Button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public EventCallback<EditUserModel> EditedUser { get; set; }
    [Parameter] public User User { get; set; } = default!;

    private EditUserModel editUserModel = new();
    private EditContext? editContext;
    private string message = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Reset();
    }

    private void Reset()
    {
        editUserModel = new()
        {
            Name = User.Name,
            Password = User.Password,
            Email = User.Email,
            Role = User.Role
        };
        editContext = new EditContext(editUserModel);
    }

    public async Task HandleOnValidSubmit()
    {
        message = string.Empty;

        if (editContext?.Validate() ?? false)
        {
            User.Name = editUserModel.Name!;
            User.Password = editUserModel.Password!;
            User.Email = editUserModel.Email!;
            User.Role = editUserModel.Role!;

            bool success = await UserService.UpdateUser(User);

            if (success)
            {
                await EditedUser.InvokeAsync(editUserModel);
            }
            else
            {
                message = "<div class='validation-message'>Unable to edit user.</div>";
            }
        }
        else
        {
            message = "<div class='validation-message'>Unable to validate form.</div>";
        }

        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (User is not null)
        {
            Reset();
        }
    }

    public class EditUserModel
    {
        [Required(ErrorMessage = "'Name' is required.")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "'Password' is required.")]
        public string? Password { get; set; }

        [Required(ErrorMessage = "'Email' is required.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "'Role' is required.")]
        public string? Role { get; set; } = UserRole.Standard;
    }
}
