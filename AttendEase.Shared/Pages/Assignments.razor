@page "/assignments"
@using AttendEase.DB.Models
@using AttendEase.Shared.Models
@using Microsoft.EntityFrameworkCore
@using System.Diagnostics.CodeAnalysis
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Assignments</PageTitle>

<div class="header-help">
    <h1>Assignment Management</h1>

    <Button Color="ButtonColor.Secondary" Outline="true" @onclick="@(async () => await assignmentsHelp.ToggleAsync())"><Icon Name="IconName.PatchQuestionFill" Size="IconSize.x5" /></Button>
</div>

<Collapse @ref="assignmentsHelp">
    <Callout Heading="Assignment Management Help">
        <Accordion>
            <AccordionItem Title="How to assign users to a schedule">
                <Content>
                    <ol>
                        <li>Click on a schedule tab to view the schedule details.</li>
                        <li>Drag and drop users between the "Unassigned Users" and "Assigned Users" lists.</li>
                        <li>Click the "Save User Assignment" button to save the changes.</li>
                    </ol>
                </Content>
            </AccordionItem>
        </Accordion>
    </Callout>
</Collapse>

@if (schedules == null)
{
    <em>Fetching schedules...</em>
}
else
{
    <Tabs EnableFadeEffect="true" OnShowing="HandleOnShowing">
        @foreach (var schedule in schedules)
        {
            <Tab Title="@schedule.Name" Name="@schedule.Id.ToString()">
                <Content>
                    <br />

                    <h4><b>Schedule Details:</b></h4>
                    <span><b>Days of Week:</b> @schedule.DaysOfWeek</span><br />
                    <span><b>Date Range:</b> @schedule.StartDate - @schedule.EndDate</span><br />
                    <span><b>Time Range:</b> @schedule.StartTime - @schedule.EndTime</span><br />
                    <span><b>Location Name:</b> @(schedule.LocationName ?? "-")</span>

                    <hr />

                    <div class="d-grid gap-2 d-md-flex justify-content-md-center my-2">
                        <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Disabled="IsSaveDisabled" @onclick="OnSave">Save User Assignment</Button>
                    </div>

                    <div class="row">
                        <div class="col">
                            <h4><b>Unassigned Users:</b></h4>
                            <SortableList TItem="User"
                                          Group="UserAssignments"
                                          Name="unassignedUsersList"
                                          Data="unassignedUsers"
                                          Context="user"
                                          EmptyText="No users are unassigned"
                                          OnUpdate="OnUnassignedUsersUpdate"
                                          OnRemove="OnUnassignedUsersRemove">
                                <ItemTemplate>
                                    @user.Name
                                </ItemTemplate>
                            </SortableList>
                        </div>
                        <div class="col">
                            <h4><b>Assigned Users:</b></h4>
                            <SortableList TItem="User"
                                          Group="UserAssignments"
                                          Name="assignedUsersList"
                                          Data="assignedUsers"
                                          Context="user"
                                          EmptyText="No users are assigned"
                                          OnUpdate="OnAssignedUsersUpdate"
                                          OnRemove="OnAssignedUsersRemove">
                                <ItemTemplate>
                                    @user.Name
                                </ItemTemplate>
                            </SortableList>
                        </div>
                    </div>
                </Content>
            </Tab>
        }
    </Tabs>
}

@code {
    [Inject] ToastService ToastService { get; set; } = default!;
    [Inject] IScheduleService ScheduleService { get; set; } = default!;
    [Inject] IUserService UserService { get; set; } = default!;

    public bool IsSaveDisabled => !isUserListDirty;

    private Collapse assignmentsHelp = default!;
    private List<Schedule> schedules = default!;
    private List<User> users = default!;
    private List<User> unassignedUsers = default!;
    private List<User> assignedUsers = default!;
    private Schedule? selectedSchedule = default!;
    private bool isUserListDirty = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task OnSave()
    {
        if (selectedSchedule is null)
        {
            ToastMessage message = new()
            {
                Type = ToastType.Warning,
                Title = "Schedule Not Found",
                HelpText = $"{DateTimeOffset.Now:G}",
                AutoHide = true,
                Message = $"Unable to find schedule."
            };
            ToastService.Notify(message);

            return;
        }

        Schedule updateSchedule = new()
        {
            Id = selectedSchedule.Id,
            Users = assignedUsers.DistinctBy(u => u.Id).Select(u => new User { Id = u.Id }).ToList()
        };

        bool success = await ScheduleService.UpdateUserAssignment(updateSchedule);

        if (success)
        {
            ToastMessage message = new()
            {
                Type = ToastType.Success,
                Title = "User Assignment Saved",
                HelpText = $"{DateTimeOffset.Now:G}",
                AutoHide = true,
                Message = $"User assignment for '{selectedSchedule.Name}' saved successfully."
            };
            ToastService.Notify(message);
        }
        else
        {
            ToastMessage message = new()
            {
                Type = ToastType.Danger,
                Title = "User Assignment Failed",
                HelpText = $"{DateTimeOffset.Now:G}",
                AutoHide = true,
                Message = $"Failed to save user assignment for '{selectedSchedule.Name}'."
            };
            ToastService.Notify(message);
        }
    }

    private async Task LoadData()
    {
        schedules = (await ScheduleService.GetSchedules())?.ToList() ?? [];
        users = (await UserService.GetUsers())?.Where(u => u.Role == UserRole.Standard).ToList() ?? [];
    }

    private async Task HandleOnShowing(TabsEventArgs e)
    {
        isUserListDirty = false;
        unassignedUsers?.Clear();
        assignedUsers?.Clear();

        _ = Guid.TryParse(e.ActiveTabName, out Guid scheduleId);
        selectedSchedule = await ScheduleService.GetSchedule(scheduleId);
        assignedUsers = selectedSchedule?.Users?.ToList() ?? [];

        UserEqualityComparer userComparer = new();
        unassignedUsers = users.Except(assignedUsers, userComparer).ToList();
    }

    private void OnUnassignedUsersUpdate(SortableListEventArgs args)
    {
        isUserListDirty = true;
        User userToMove = unassignedUsers[args.OldIndex];

        unassignedUsers.RemoveAt(args.OldIndex);

        if (args.NewIndex < unassignedUsers.Count)
        {
            unassignedUsers.Insert(args.NewIndex, userToMove);
        }
        else
        {
            unassignedUsers.Add(userToMove);
        }
    }

    private void OnAssignedUsersUpdate(SortableListEventArgs args)
    {
        isUserListDirty = true;
        User userToMove = assignedUsers[args.OldIndex];

        assignedUsers.RemoveAt(args.OldIndex);

        if (args.NewIndex < assignedUsers.Count)
        {
            assignedUsers.Insert(args.NewIndex, userToMove);
        }
        else
        {
            assignedUsers.Add(userToMove);
        }
    }

    private void OnUnassignedUsersRemove(SortableListEventArgs args)
    {
        isUserListDirty = true;
        User user = unassignedUsers[args.OldIndex];

        assignedUsers.Insert(args.NewIndex, user);

        unassignedUsers.Remove(unassignedUsers[args.OldIndex]);
    }

    private void OnAssignedUsersRemove(SortableListEventArgs args)
    {
        isUserListDirty = true;
        User user = assignedUsers[args.OldIndex];

        unassignedUsers.Insert(args.NewIndex, user);

        assignedUsers.Remove(assignedUsers[args.OldIndex]);
    }

    public class UserEqualityComparer : IEqualityComparer<User>
    {
        public bool Equals(User? user1, User? user2)
        {
            if (user1 is null || user2 is null)
            {
                return false;
            }

            return user1.Id.Equals(user2.Id);
        }

        public int GetHashCode([DisallowNull] User user)
        {
            return user.Id.GetHashCode();
        }
    }
}
