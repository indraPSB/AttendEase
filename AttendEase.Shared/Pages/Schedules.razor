@page "/schedules"
@using AttendEase.DB.Models
@using AttendEase.Shared.Components.Schedules
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Schedules</PageTitle>

<div class="header-help">
    <h1>Schedule Management</h1>

    <Button Color="ButtonColor.Secondary" Outline="true" @onclick="@(async () => await schedulesHelp.ToggleAsync())"><Icon Name="IconName.PatchQuestionFill" Size="IconSize.x5" /></Button>
</div>

<Collapse @ref="schedulesHelp">
    <Callout Heading="Schedule Management Help">
        <Accordion>
            <AccordionItem Title="How to add schedules">
                <Content>
                    <ol>
                        <li>Click on the "Add Schedule" button.</li>
                        <li>Fill in the schedule details.</li>
                        <li>Click on the "Add" button.</li>
                    </ol>
                </Content>
            </AccordionItem>
            <AccordionItem Title="How to edit schedules">
                <Content>
                    <ol>
                        <li>Select a schedule from the list.</li>
                        <li>Click on the "Edit Schedule" button.</li>
                        <li>Update the schedule details.</li>
                        <li>Click on the "Edit" button.</li>
                    </ol>
                </Content>
            </AccordionItem>
            <AccordionItem Title="How to delete schedules">
                <Content>
                    <ol>
                        <li>Select one or more schedules from the list.</li>
                        <li>Click on the "Delete Schedule" button.</li>
                        <li>Confirm the list of schedules.</li>
                        <li>Click on the "Delete" button.</li>
                    </ol>
                </Content>
            </AccordionItem>
        </Accordion>
    </Callout>
</Collapse>

<div class="d-grid gap-2 d-md-flex justify-content-md-center my-2">
    <Button Class="me-1 my-1" Color="ButtonColor.Primary" @onclick="OnAddSchedule">Add Schedule</Button>
    <Button Class="me-1 my-1" Color="ButtonColor.Primary" @onclick="OnEditSchedule" Disabled="isEditDisabled">
        Edit Schedule
        <Badge Color="@(isEditDisabled ? BadgeColor.Danger : BadgeColor.Success)">@selectedSchedulesCount</Badge>
    </Button>
    <Button Class="me-0 my-1" Color="ButtonColor.Primary" @onclick="OnDeleteSchedules" Disabled="isDeleteDisabled">
        Delete Schedule
        <Badge Color="@(isDeleteDisabled ? BadgeColor.Danger : BadgeColor.Success)">@selectedSchedulesCount</Badge>
    </Button>
</div>

<ListSchedules @ref="listSchedules" SelectedSchedulesChanged="OnSelectedItemsChanged" />

<Modal @ref="addScheduleModal" title="Add New Schedule" IsScrollable="true" CloseOnEscape="true" OnHiding="OnHiding">
    <BodyTemplate>
        <AddSchedule AddedSchedule="OnAddedSchedule" />
    </BodyTemplate>
</Modal>

<Modal @ref="editScheduleModal" title="Edit Schedule" IsScrollable="true" CloseOnEscape="true" OnHiding="OnHiding">
    <BodyTemplate>
        <EditSchedule />
    </BodyTemplate>
</Modal>

<Modal @ref="deleteSchedulesModal" title="Delete Schedules" IsScrollable="true" CloseOnEscape="true" OnHiding="OnHiding">
    <BodyTemplate>
        <DeleteSchedules />
    </BodyTemplate>
</Modal>

@code {
    [Inject] ToastService ToastService { get; set; } = default!;

    private Collapse schedulesHelp = default!;
    private HashSet<Schedule> selectedSchedules = new();
    private ListSchedules listSchedules = default!;
    private Modal addScheduleModal = default!;
    private Modal editScheduleModal = default!;
    private Modal deleteSchedulesModal = default!;
    private bool isEditDisabled = true;
    private bool isDeleteDisabled = true;
    private int selectedSchedulesCount = 0;

    private void OnSelectedItemsChanged(HashSet<Schedule> selectedSchedules)
    {
        this.selectedSchedules = selectedSchedules;
        isEditDisabled = selectedSchedules.Count != 1;
        isDeleteDisabled = selectedSchedules.Count < 1;
        selectedSchedulesCount = selectedSchedules.Count;
    }

    private async Task OnAddSchedule()
    {
        await addScheduleModal.ShowAsync();
    }

    private async Task OnAddedSchedule(AddSchedule.AddScheduleModel schedule)
    {
        ToastMessage message = new()
        {
            Type = ToastType.Success,
            Title = "Schedule Added",
            HelpText = $"{DateTimeOffset.Now:G}",
            AutoHide = true,
            Message = $"Schedule '{schedule.Name}' added successfully."
        };
        ToastService.Notify(message);

        await listSchedules.RefreshSchedules();

        //await addScheduleModal.HideAsync();
    }

    private async Task OnEditSchedule()
    {
        if (selectedSchedules.Count == 1)
        {
            Schedule schedule = selectedSchedules.First();
            Dictionary<string, object>? parameters = new()
            {
                { "Schedule", schedule },
                { "EditedSchedule", EventCallback.Factory.Create<EditSchedule.EditScheduleModel>(this, OnEditedSchedule) }
            };
            await editScheduleModal.ShowAsync<EditSchedule>($"Edit Schedule '{schedule.Name}'", parameters: parameters);
        }
        else
        {
            ToastMessage message = new()
            {
                Type = ToastType.Warning,
                Title = "Cannot Edit Schedule",
                HelpText = $"{DateTimeOffset.Now:G}",
                AutoHide = true,
                Message = "Exactly one schedule must be selected to be edited."
            };
            ToastService.Notify(message);
        }
    }

    private async Task OnEditedSchedule(EditSchedule.EditScheduleModel schedule)
    {
        ToastMessage message = new()
        {
            Type = ToastType.Success,
            Title = "Schedule Edited",
            HelpText = $"{DateTimeOffset.Now:G}",
            AutoHide = true,
            Message = $"Schedule '{schedule.Name}' edited successfully."
        };
        ToastService.Notify(message);

        await listSchedules.RefreshSchedules();

        //await editScheduleModal.HideAsync();
    }

    private async Task OnDeleteSchedules()
    {
        if (selectedSchedules.Count > 0)
        {
            Dictionary<string, object>? parameters = new()
            {
                { "Schedules", selectedSchedules },
                { "DeletedSchedules", EventCallback.Factory.Create<DeleteSchedules.DeleteSchedulesModel>(this, OnDeletedSchedules) }
            };

            await deleteSchedulesModal.ShowAsync<DeleteSchedules>("Delete Schedules", parameters: parameters);
        }
        else
        {
            ToastMessage message = new()
            {
                Type = ToastType.Warning,
                Title = "Cannot Edit Schedule",
                HelpText = $"{DateTimeOffset.Now:G}",
                AutoHide = true,
                Message = "Exactly one schedule must be selected to be edited."
            };
            ToastService.Notify(message);
        }
    }

    private async Task OnDeletedSchedules(DeleteSchedules.DeleteSchedulesModel schedules)
    {
        int count = schedules.Schedules.Count();
        ToastMessage message = new()
        {
            Type = ToastType.Success,
            Title = "Schedule Deleted",
            HelpText = $"{DateTimeOffset.Now:G}",
            AutoHide = true,
            Message = count == 1
                ? $"Schedule '{schedules.Schedules.First().Name}' deleted successfully."
                : $"'{count}' schedule{(count == 1 ? " " : "s ")}deleted successfully."
        };
        ToastService.Notify(message);

        await listSchedules.RefreshSchedules();

        //await deleteScheduleModal.HideAsync();
    }

    private async Task OnHiding()
    {
        await listSchedules.RefreshSchedules();
    }
}
