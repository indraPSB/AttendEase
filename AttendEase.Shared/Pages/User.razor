@page "/user"
@using AttendEase.Shared.Components.Users
@using DBUser = AttendEase.DB.Models.User
@attribute [Authorize(Roles = "Admin")]

<PageTitle>User</PageTitle>

<h1>User Management</h1>

<Button Color="ButtonColor.Secondary" Outline="true" @onclick="@(async () => await userHelp.ToggleAsync())"><Icon Name="IconName.PatchQuestion" Size="IconSize.x5" /></Button>
<Collapse @ref="userHelp">
    <Callout Heading="Help">
        <Accordion>
            <AccordionItem Title="How to add users" Name="AccordionItem1">
                <Content>
                    <ol>
                        <li>Click on the "Add User" button.</li>
                        <li>Fill in the user's details.</li>
                        <li>Click on the "Save" button.</li>
                    </ol>
                </Content>
            </AccordionItem>
            <AccordionItem Title="How to edit users" Name="AccordionItem2">
                <Content>
                    <ol>
                        <li>Select a user from the list.</li>
                        <li>Click on the "Edit User" button.</li>
                        <li>Update the user's details.</li>
                        <li>Click on the "Save" button.</li>
                    </ol>
                </Content>
            </AccordionItem>
            <AccordionItem Title="How to delete users" Name="AccordionItem3">
                <Content>
                    <ol>
                        <li>Select one or more users from the list.</li>
                        <li>Click on the "Delete User" button.</li>
                        <li>Confirm the deletion.</li>
                    </ol>
                </Content>
            </AccordionItem>
        </Accordion>
    </Callout>
</Collapse>

<div class="my-2">
    <Button Class="me-1 my-1" Color="ButtonColor.Primary" @onclick="OnAddUser">Add User</Button>
    <Button Class="me-1 my-1" Color="ButtonColor.Primary" @onclick="OnEditUser" Disabled="isEditDisabled">
        Edit User
        <Badge Color="@(isEditDisabled ? BadgeColor.Danger : BadgeColor.Success)">@selectedUsersCount</Badge>
    </Button>
    <Button Class="me-0 my-1" Color="ButtonColor.Primary" @onclick="OnDeleteUsers" Disabled="isDeleteDisabled">
        Delete User
        <Badge Color="@(isDeleteDisabled ? BadgeColor.Danger : BadgeColor.Success)">@selectedUsersCount</Badge>
    </Button>
</div>

<ListUsers @ref="listUsers" SelectedUsersChanged="OnSelectedItemsChanged" />

<Modal @ref="addUserModal" title="Add New User" IsScrollable="true" CloseOnEscape="true" OnHiding="OnHiding">
    <BodyTemplate>
        <AddUser AddedUser="OnAddedUser" />
    </BodyTemplate>
</Modal>

<Modal @ref="editUserModal" title="Edit User" IsScrollable="true" CloseOnEscape="true" OnHiding="OnHiding">
    <BodyTemplate>
        <EditUser />
    </BodyTemplate>
</Modal>

<Modal @ref="deleteUserModal" title="Delete Users" IsScrollable="true" CloseOnEscape="true" OnHiding="OnHiding">
    <BodyTemplate>
        <DeleteUsers />
    </BodyTemplate>
</Modal>

@code {
    [Inject] ToastService ToastService { get; set; } = default!;

    private HashSet<DBUser> selectedUsers = new();
    private ListUsers listUsers = default!;
    private Collapse userHelp = default!;
    private Modal addUserModal = default!;
    private Modal editUserModal = default!;
    private Modal deleteUserModal = default!;
    private bool isEditDisabled = true;
    private bool isDeleteDisabled = true;
    private int selectedUsersCount = 0;

    private void OnSelectedItemsChanged(HashSet<DBUser> selectedUsers)
    {
        this.selectedUsers = selectedUsers;
        string countMessage = $"({selectedUsers.Count}{(selectedUsers.Count == 1 ? $" - {selectedUsers.First().Name}" : string.Empty)})";
        isEditDisabled = selectedUsers.Count != 1;
        isDeleteDisabled = selectedUsers.Count < 1;
        selectedUsersCount = selectedUsers.Count;
    }

    private async Task OnAddUser()
    {
        await addUserModal.ShowAsync();
    }

    private async Task OnAddedUser(AddUser.AddUserModel user)
    {
        ToastMessage message = new()
        {
            Type = ToastType.Success,
            Title = "User Added",
            HelpText = $"{DateTimeOffset.Now:G}",
            AutoHide = true,
            Message = $"User '{user.Name}' added successfully."
        };
        ToastService.Notify(message);

        await listUsers.RefreshUsers();

        //await addUserModal.HideAsync();
    }

    private async Task OnEditUser()
    {
        if (selectedUsers.Count == 1)
        {
            DBUser user = selectedUsers.First();
            Dictionary<string, object>? parameters = new()
            {
                { "User", user },
                { "EditedUser", EventCallback.Factory.Create<EditUser.EditUserModel>(this, OnEditedUser) }
            };
            await editUserModal.ShowAsync<EditUser>($"Edit User '{user.Name}'", parameters: parameters);
        }
        else
        {
            ToastMessage message = new()
            {
                Type = ToastType.Warning,
                Title = "Cannot Edit User",
                HelpText = $"{DateTimeOffset.Now:G}",
                AutoHide = true,
                Message = "Exactly one user must be selected to be edited."
            };
            ToastService.Notify(message);
        }
    }

    private async Task OnEditedUser(EditUser.EditUserModel user)
    {
        ToastMessage message = new()
        {
            Type = ToastType.Success,
            Title = "User Edited",
            HelpText = $"{DateTimeOffset.Now:G}",
            AutoHide = true,
            Message = $"User '{user.Name}' edited successfully."
        };
        ToastService.Notify(message);

        await listUsers.RefreshUsers();

        //await editUserModal.HideAsync();
    }

    private async Task OnDeleteUsers()
    {
        if (selectedUsers.Count > 0)
        {
            Dictionary<string, object>? parameters = new()
            {
                { "Users", selectedUsers },
                { "DeletedUsers", EventCallback.Factory.Create<DeleteUsers.DeleteUsersModel>(this, OnDeletedUsers) }
            };
            await deleteUserModal.ShowAsync<DeleteUsers>("Delete Users", parameters: parameters);
        }
        else
        {
            ToastMessage message = new()
            {
                Type = ToastType.Warning,
                Title = "Cannot Edit User",
                HelpText = $"{DateTimeOffset.Now:G}",
                AutoHide = true,
                Message = "Exactly one user must be selected to be edited."
            };
            ToastService.Notify(message);
        }
    }

    private async Task OnDeletedUsers(DeleteUsers.DeleteUsersModel users)
    {
        int count = users.Users.Count();
        ToastMessage message = new()
        {
            Type = ToastType.Success,
            Title = "User Edited",
            HelpText = $"{DateTimeOffset.Now:G}",
            AutoHide = true,
            Message = count == 1
                ? $"User '{users.Users.First().Name}' deleted successfully."
                : $"'{count}' user{(count == 1 ? " " : "s ")}deleted successfully."
        };
        ToastService.Notify(message);

        await listUsers.RefreshUsers();

        //await deleteUserModal.HideAsync();
    }

    private async Task OnHiding()
    {
        await listUsers.RefreshUsers();
    }
}
