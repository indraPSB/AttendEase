@page "/contact"
@using System.ComponentModel.DataAnnotations
@using AttendEase.Shared.Models
@using DBContact = AttendEase.DB.Models.Contact

<PageTitle>Contact</PageTitle>

<div class="header-help">
    <h1>Contact Us</h1>

    <Button Color="ButtonColor.Secondary" Outline="true" @onclick="@(async () => await contactHelp.ToggleAsync())"><Icon Name="IconName.PatchQuestionFill" Size="IconSize.x5" /></Button>
</div>

<Collapse @ref="contactHelp">
    <Callout Heading="Contact Us Help">
        <Accordion>
            <AccordionItem Title="How to send general feedback">
                <Content>
                    <ol>
                        <li>Select the 'General Feedback' option.</li>
                        <li>Enter your email address.</li>
                        <li>Enter your message.</li>
                        <li>Click on the 'Submit' button.</li>
                    </ol>
                </Content>
            </AccordionItem>
            <AccordionItem Title="How to reset password">
                <Content>
                    <ol>
                        <li>Select the 'Reset Password' option.</li>
                        <li>Enter your email address.</li>
                        <li>Click on the 'Submit' button.</li>
                    </ol>
                </Content>
            </AccordionItem>
            <AccordionItem Title="How to send other matters of concern">
                <Content>
                    <ol>
                        <li>Select the 'Others' option.</li>
                        <li>Enter your email address.</li>
                        <li>Enter your message.</li>
                        <li>Click on the 'Submit' button.</li>
                    </ol>
                </Content>
            </AccordionItem>
        </Accordion>
    </Callout>
</Collapse>

<EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-floating mb-3">
        <InputText id="contact-email" type="email" class="form-control" placeholder="E-Mail" @bind-Value="@contact.Email" />
        <label for="contact-email">E-Mail</label>
    </div>

    <div class="form-floating mb-3">
        <select class="form-select" id="contact-subject" @bind=@contact.Subject @bind:after="HandleSelectionChanged">
            <option value="@ContactSubject.GeneralFeedback" selected>@ContactSubject.GeneralFeedback</option>
            <option value="@ContactSubject.ResetPassword">@ContactSubject.ResetPassword</option>
            <option value="@ContactSubject.Others">@ContactSubject.Others</option>
        </select>
        <label for="contact-subject">Suject</label>
    </div>

    @if (contact.Subject != "Reset Password")
    {
        <div class="form-floating mb-3">
            <InputTextArea id="contact-message" type="text" class="form-control" placeholder="Message" @bind-Value="@contact.Message" />
            <label for="contact-message">Message</label>
        </div>
    }

    <ValidationMessage For="@(() => contact.Email)" class="validation-message mt-3" />
    <ValidationMessage For="@(() => contact.Message)" />
    @((MarkupString)message)

    <div class="d-grid gap-2 d-md-flex justify-content-md-center">
        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="mt-3">Submit</Button>
    </div>
</EditForm>

@code {
    [Inject] IContactService ContactService { get; set; } = default!;

    private Collapse contactHelp = default!;
    private ContactModel contact = new();
    private EditContext? editContext;
    private string message = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        editContext = new EditContext(contact);
    }

    public async Task HandleOnValidSubmit()
    {
        if (editContext?.Validate() ?? false)
        {
            if (contact.Subject != ContactSubject.ResetPassword && string.IsNullOrEmpty(contact.Message))
            {
                message = "<div class='validation-message'>Message is required.</div>";
            }
            else
            {
                DBContact dbContact = new()
                {
                    Email = contact.Email!,
                    Timestamp = new DateTimeOffset(DateTimeOffset.Now.DateTime, TimeSpan.Zero),
                    Subject = contact.Subject!,
                    MessageUser = contact.Subject == ContactSubject.ResetPassword ? null : contact.Message
                };

                bool success = await ContactService.AddContact(dbContact);

                if (!success)
                {
                    message = "<div class='validation-message'>Unable to send message. Please try again later.</div>";
                }
            }
        }
        else
        {
            message = "<div class='validation-message'>Unable to validate form.</div>";
        }

        StateHasChanged();
    }

    private void HandleSelectionChanged()
    {
        if (contact.Subject == ContactSubject.ResetPassword)
        {
            contact.Message = "No message required.";
        }
        else
        {
            contact.Message = null;
        }
    }

    public class ContactModel
    {
        [Required(ErrorMessage = "'Email' is required.")]
        public string? Email { get; set; }
        public string? Subject { get; set; } = ContactSubject.GeneralFeedback;
        [Required(ErrorMessage = "'Message' is required.")]
        public string? Message { get; set; }
    }
}
